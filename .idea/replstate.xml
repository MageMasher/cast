<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1447055990221">{:repl-history {:ide [], :local [&quot;(.getMethods SyntaxElement$Macro)&quot; &quot;(into [] (.getMethods SyntaxElement$Macro))&quot; &quot;(SyntaxElement$Macro/values)&quot; &quot;(into [] (SyntaxElement$Macro/values))&quot; &quot;(map #(.getName %) (into [] (SyntaxElement$Macro/values)))&quot; &quot;(map #(.name %) (into [] (SyntaxElement$Macro/values)))&quot; &quot;(map #(.name %) (SyntaxElement$Macro/values))&quot; &quot;(require '[clojure.string  :as str])&quot; &quot;(map #(str/lower-case (.name %)) (SyntaxElement$Macro/values))&quot; &quot;(cst-read-string \&quot;#{:bar :foo}\&quot;)&quot; &quot;(import '[java.io PushbackReader StringReader])&quot; &quot;(LispReader/read io nil)&quot; &quot;(LispReader/read io {:eof :end})&quot; &quot;(def end (Object.))&quot; &quot;(def io (PushbackReader. (StringReader. \&quot;#{:bar :foo} (x)\&quot;)))&quot; &quot;(LispReader/read io {:eof end})&quot; &quot;SyntaxElement$Macro&quot; &quot;SyntaxElement$Macro$FN&quot; &quot;SyntaxElement$Macro/FN&quot; &quot;(use 'cst.reader)&quot; &quot;(use '[cst.reader] :reload-all)&quot; &quot;(cst-read-string \&quot;#{:bar :foo} (x)\&quot;)&quot; &quot;(cst-read-all-string \&quot;#{:bar :foo} (x)\&quot;)&quot; &quot;(def rdr (slurp \&quot;/Users/pag/src/IdeaProjects/cast/src/clj/cst/reader.clj\&quot;))&quot; &quot;(take 20 rdr)&quot; &quot;(cst-read-all-string rdr)&quot; &quot;(map #(keyword (str/lower-case (.name %))) (SyntaxElement$Macro/values))&quot; &quot;(require 'cst.test)&quot; &quot;(require '[cst.test])&quot; &quot;(require '[cst.database])&quot; &quot;(require '[cst.data])&quot; &quot;cst.data.reader-macros&quot; &quot;(require 'cst.data)&quot; &quot;(use 'cst.data)&quot; &quot;cst.data/reader-macros&quot; &quot;(use 'cst.test)&quot; &quot;(require '[cst.database] :reload-all)&quot; &quot;(main-)&quot; &quot;(cst.test/main-)&quot; &quot;(require '[cst.test] :reload-all)&quot; &quot;(list-data [:a :b] :vector)&quot; &quot;(def n (:db/id (first *1)))&quot; &quot;n&quot; &quot;(type n)&quot; &quot;(import '[datomic.db DbId])&quot; &quot;(instance? DbId n)&quot; &quot;() (list-data '(list 1 2 3) :list)&quot; &quot;(use '[cst.test-database] :reload-all)&quot; &quot;(list-data '(list 1 2 3) :list)&quot; &quot;(use '[cst.database-test] :reload-all)&quot; &quot;(map blankify-nodes (list-data '(list 1 2 3) :list))&quot; &quot;simple-test&quot; &quot;(tx-data '(list 1 2 3) :list)&quot; &quot;(tx-data '(list 1 2 3))&quot; &quot;(tx-data [1 2])&quot; &quot;(use '[cst.database] :reload-all)&quot; &quot;(tx-data [{:a 0 :b 1}])&quot; &quot;(tx-data #{0 1})&quot; &quot;(def setd (reader/cst-read-all-string \&quot;#{1 2}\&quot;))&quot; &quot;s&quot; &quot;setd&quot; &quot;(type setd)&quot; &quot;(.data setd)&quot; &quot;(type (.data setd))&quot; &quot;(.get (.data setd) 0)&quot; &quot;(.emit (.get (.data setd) 0))&quot; &quot;(.emit setd)&quot; &quot;(.emit (reader/cst-read-all-string \&quot;#{1 2\&quot;))&quot; &quot;(.emit (reader/cst-read-all-string \&quot;#{1 2}\&quot;))&quot; &quot;(.emit (reader/cst-read-all-string \&quot;[1 2]\&quot;))&quot; &quot;(.emit (reader/cst-read-all-string \&quot;{1 2}\&quot;))&quot; &quot;(.emit (reader/cst-read-all-string \&quot;(1 2)\&quot;))&quot; &quot;(.emit (reader/cst-read-all-string \&quot;1 2\&quot;))&quot; &quot;(.emit (reader/cst-read-all-string \&quot;symbol\&quot;))&quot; &quot;f&quot; &quot;(def d (reader/cst-read-all-string f))&quot; &quot;(reader/cst-read-all-string \&quot;1\&quot;)&quot; &quot;(reader/cst-read-string \&quot;1\&quot;)&quot; &quot;(require '[cst.reader :as reader] :reload-all)&quot; &quot;two&quot; &quot;e&quot; &quot;(LispReader/read io {:eof :eof})&quot; &quot;(import '[cst LispReader])&quot; &quot;(import '[java.io PushbackReader StringReader Writer])&quot; &quot;(def io (PushbackReader. (StringReader. f)))&quot; &quot;(def one (LispReader/read io {:eof :eof}))&quot; &quot;(def two (LispReader/read io {:eof :eof}))&quot; &quot;(def three (LispReader/read io {:eof :eof}))&quot; &quot;three&quot; &quot;(.emit three)&quot; &quot;(import '[java.util.regex Matcher Pattern])&quot; &quot;(Pattern/compile \&quot;a\&quot;)&quot; &quot;(.toString (Pattern/compile \&quot;a\&quot;))&quot; &quot;(use '[cst.database])&quot; &quot;(def f (slurp \&quot;/Users/pag/src/IdeaProjects/cast/src/clj/cst/test.clj\&quot;))&quot; &quot;(take 10 f)&quot; &quot;(def c (cst-read-all-string f))&quot; &quot;c&quot; &quot;(.emit c)&quot; &quot;(tx-data c)&quot; &quot;(.printStackTrace *e)&quot;], :remote []}}</component>
</project>