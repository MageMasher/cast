<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1445833005152">{:repl-history {:ide [], :local [&quot;i&quot; &quot;(def pr (PushbackReader. (StringReader. \&quot;5\&quot;)))&quot; &quot;(LispReader/read pr)&quot; &quot;(cst.LispReader/read pr)&quot; &quot;(cst.LispReader/read pr nil)&quot; &quot;(ast-read-string \&quot;foo\&quot;)&quot; &quot;(class (ast-read-string \&quot;foo\&quot;))&quot; &quot;(class (ast-read-string \&quot;@foo\&quot;))&quot; &quot;(first (ast-read-string \&quot;@foo\&quot;))&quot; &quot;(second (ast-read-string \&quot;@foo\&quot;))&quot; &quot;[cst LispReader]&quot; &quot;(class (second (ast-read-string \&quot;@foo\&quot;)))&quot; &quot;(ast-read-string \&quot;foo ; a foo\&quot;)&quot; &quot;(ast-read-string \&quot;foo ; foo\&quot;)&quot; &quot;(ast-read-string \&quot;; foo\&quot;)&quot; &quot;(def c (second *1))&quot; &quot;c&quot; &quot;(def l *1)&quot; &quot;(pr c)&quot; &quot;*print-readably*&quot; &quot;(import '[java.io Writer])&quot; &quot;(defmethod clojure.core/print-method cst.CommaSyntax [o ^Writer w]\n  (pr \&quot;, \&quot;))&quot; &quot;(pr {:a 1})&quot; &quot;(pr l)&quot; &quot;(ast-read-string \&quot;5\&quot;)&quot; &quot;(use ast-reader)&quot; &quot;5&quot; &quot;(ast-read-string \&quot;{:a 1}\&quot;)&quot; &quot;(def x (second *1))&quot; &quot;x&quot; &quot;(.type x)&quot; &quot;(.data x)&quot; &quot;(ast-read-string \&quot;(foo, bar)\&quot;)&quot; &quot;(ast-read-string \&quot;(foo, bar) ; blah\&quot;)&quot; &quot;(ast-read-string \&quot;; blah\&quot;)&quot; &quot;(ast-read-string \&quot;@foo\&quot;)&quot; &quot;(ast-read-string \&quot;@(call other)\&quot;)&quot; &quot;(doc cond)&quot; &quot;(doc case)&quot; &quot;(use 'ast-reader)&quot; &quot;ast-read&quot; &quot;(ast-read-string \&quot;'(call other)\&quot;)&quot; &quot;(type *1)&quot; &quot;(def o (ast-read-string \&quot;'(call other)\&quot;))&quot; &quot;(.data o)&quot; &quot;(.type o)&quot; &quot;(type (.data o))&quot; &quot;(first (.data o))&quot; &quot;(def o (ast-read-string \&quot;@(call other)\&quot;))&quot; &quot;(def o (ast-read-string \&quot;@(call,other)\&quot;))&quot; &quot;(def o (ast-read-string \&quot;^foo\&quot;))&quot; &quot;(type 0)&quot; &quot;(type o)&quot; &quot;(meta o)&quot; &quot;(def o (ast-read-string \&quot;^String data\&quot;))&quot; &quot;o&quot; &quot;(str *1)&quot; &quot;(type (ast-read-string \&quot;^{:type String} data\&quot;))&quot; &quot;(ast-read-string \&quot;^{:type String} data\&quot;)&quot; &quot;(ast-read-string \&quot;^String data\&quot;)&quot; &quot;(ast-read-string \&quot;^:private data\&quot;)&quot; &quot;(ast-read-string \&quot;'(foo ~bar baz\&quot;)&quot; &quot;(ast-read-string \&quot;'(foo ~bar baz)\&quot;)&quot; &quot;(ast-read-string \&quot;'(foo ~@bar baz)\&quot;)&quot; &quot;(type (ast-read-string \&quot;`Foo.\&quot;))&quot; &quot;(ast-read-string \&quot;`Foo.\&quot;)&quot; &quot;(ast-read-string \&quot;\\n\&quot;)&quot; &quot;(ast-read-string \&quot;\\\\n\&quot;)&quot; &quot;(ast-read-string \&quot;\\space\&quot;)&quot; &quot;(ast-read-string \&quot;\\\\space\&quot;)&quot; &quot;(ast-read-string \&quot;%1\&quot;)&quot; &quot;(ast-read-string \&quot;%\&quot;)&quot; &quot;(type (ast-read-string \&quot;%\&quot;))&quot; &quot;(type (ast-read-string \&quot;#(foo %)\&quot;))&quot; &quot;1&quot; &quot;\\tab&quot; &quot;(int \\tab)&quot; &quot;cst-read-string&quot; &quot;(cst-read-string \&quot;#(foo %)\&quot;)&quot; &quot;(cst-read-string \&quot;#(foo %1)\&quot;)&quot; &quot;(println 5)&quot; &quot;(csr-read-string \&quot;(println \\\&quot;foo\\\&quot;)\&quot;)&quot; &quot;(cst-read-string \&quot;(println \\\&quot;foo\\\&quot;)\&quot;)&quot; &quot;(exec (cst-read-string \&quot;(println \\\&quot;foo\\\&quot;)\&quot;))&quot; &quot;(eval (cst-read-string \&quot;(println \\\&quot;foo\\\&quot;)\&quot;))&quot; &quot;(cst-read-string \&quot;#(= 5 5)\&quot;)&quot; &quot;(def r *1)&quot; &quot;(nth r 2)&quot; &quot;(nth (nth r 2) 2)&quot; &quot;(type (nth (nth r 2) 2))&quot; &quot;(println \&quot;---\&quot;)&quot; &quot;(cst-read-string \&quot;#(= %1 #(= 1 %))\&quot;)&quot; &quot;(cst-read-string \&quot;#(= 5 %)\&quot;)&quot; &quot;(cst-read-string \&quot;#(= %1 %2)\&quot;)&quot; &quot;(cst-read-string \&quot;(defn str-&gt;int [s]\\n  [ :a #?@(:clj [:aa :ab])\\n     :cljs [:bb :bc])])\&quot; {:read-cond :allow})&quot; &quot;(cst-read-string \&quot;(defn str-&gt;int [s]\\n  [ :a #?@(:clj [:aa :ab]\\n     :cljs [:bb :bc])])\&quot; {:read-cond :allow})&quot; &quot;(cst-read-string \&quot;(defn str-&gt;int [s]\\n  #?(:clj  (java.lang.Integer/parseInt s)\\n     :cljs (js/parseInt s)))\&quot; {:read-cond :allow})&quot; &quot;(cst-read-string \&quot;(defn str-&gt;int [s]\\n  [ :a #?@(:clj [:aa :ab]\\n     :cljs [:bb :bc]) :d])\&quot; {:read-cond :allow})&quot; &quot;(cst-read-string \&quot;(defn str-&gt;int [s]\\n  [ :a #?@(:clj [:aa :ab]\\n     :cljs :bb) :d])\&quot; {:read-cond :allow})&quot; &quot;(cst-read-string \&quot;(defn str-&gt;int [s]\\n  [ :a #?@(:clj [:aa :ab]\\n     :cljs '(:bb :bc)) :d])\&quot; {:read-cond :allow})&quot; &quot;(cst-read-string \&quot;(defn str-&gt;int [s]\\n  [ :a #?@(:clj [:aa :ab]\\n     :cljs (:bb :bc)) :d])\&quot; {:read-cond :allow})&quot;], :remote []}}</component>
</project>